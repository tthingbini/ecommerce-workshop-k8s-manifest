apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    tags.datadoghq.com/service: storefront
    app: ecommerce
    tags.datadoghq.com/env: "development"
  name: frontend
  namespace: ecommerce
spec:
  replicas: 3
  selector:
    matchLabels:
      tags.datadoghq.com/service: storefront
      tags.datadoghq.com/env: "development"
      app: ecommerce
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        tags.datadoghq.com/service: storefront
        tags.datadoghq.com/env: "development"
        admission.datadoghq.com/enabled: "true"
        app: ecommerce
    spec:
      containers:
      - args:
        - docker-entrypoint.sh
        command:
        - sh
        env:
        - name: DD_PROFILING_ENABLED
          value: "true"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1"
        - name: DB_USERNAME
          value: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: pw
              name: db-password
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_ANALYTICS_ENABLED
          value: "true"
        - name: DISCOUNTS_ROUTE
          value: "http://discounts"
        - name: DISCOUNTS_PORT
          value: "5001"
        - name: ADS_ROUTE
          value: "http://adv-rollout-bluegreen-active"
        - name: ADS_PORT
          value: "5002"
        image: 241825837502.dkr.ecr.ap-northeast-2.amazonaws.com/frontend:gold
        envFrom:
        - secretRef:
            name: mir-secret
        imagePullPolicy: Always
        name: ecommerce-spree-observability
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          requests:
            cpu: 200m
            memory: 50Mi
           
          

---
apiVersion: v1
kind: Service
metadata:
  labels:
    tags.datadoghq.com/service: storefront
    tags.datadoghq.com/env: development
    app: ecommerce
  name: frontend
  namespace: ecommerce
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
      nodePort: 30050
      name: http
  selector:
    tags.datadoghq.com/service: storefront
    tags.datadoghq.com/env: development
    app: ecommerce
  # Change this value to LoadBalancer for better public ingress routing to this
  # pod on most k8s platforms.
  type: LoadBalancer
  sessionAffinity: ClientIP


# apiVersion: argoproj.io/v1alpha1 # apps/v1 대신 argoproj.io/v1alpha1을 사용한다
# kind: Rollout # Deplyment 대신 Rollout을 사용한다
# metadata:
#   labels:
#     tags.datadoghq.com/service: storefront
#     app: ecommerce
#     tags.datadoghq.com/env: "development"
#   name: frontend
#   namespace: ecommerce
# spec:
#   replicas: 2
#   revisionHistoryLimit: 3
#   selector:
#     matchLabels:
#       tags.datadoghq.com/service: storefront
#       tags.datadoghq.com/env: "development"
#       app: ecommerce
#   strategy:
#     blueGreen: 
#       #activeService는 이전의 배포된 Blue 서비스
#       activeService: frontend-rollout-bluegreen-active
      
#       #previewService는 새롭게 배포될 Green 서비스
#       previewService: frontend-rollout-bluegreen-preview
      
#       #autoPromotioEnabled 옵션은 Blue/Green 배포를 자동으로 진행할 것인지 여부. false 옵션을 사용해 수동으로 지정
#       autoPromotionEnabled: true
      
#     # rollingUpdate:
#     #   maxSurge: 25%
#     #   maxUnavailable: 25%
#     # type: RollingUpdate
    
#   template:
#     metadata:
#       labels:
#         tags.datadoghq.com/service: storefront
#         tags.datadoghq.com/env: "development"
#         app: ecommerce
#     spec:
#       containers:
#       - args:
#         - docker-entrypoint.sh
#         command:
#         - sh
#         env:
#         - name: DB_USERNAME
#           value: user
#         - name: DB_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               key: pw
#               name: db-password
#         - name: DD_AGENT_HOST
#           valueFrom:
#             fieldRef:
#               fieldPath: status.hostIP
#         - name: DD_LOGS_INJECTION
#           value: "true"
#         - name: DD_ENV
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.labels['tags.datadoghq.com/env']
#         - name: DD_SERVICE
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.labels['tags.datadoghq.com/service']
#         - name: DD_ANALYTICS_ENABLED
#           value: "true"
#         - name: DISCOUNTS_ROUTE
#           value: "http://discounts"
#         - name: DISCOUNTS_PORT
#           value: "5001"
#         - name: ADS_ROUTE
#           value: "http://advertisements"
#         - name: ADS_PORT
#           value: "5002"
#         # Enable RUM
#         # - name: DD_CLIENT_TOKEN
#         #   value: <your_client_token>
#         # - name: DD_APPLICATION_ID
#         #   value: <your_application_id>
#         image: 241825837502.dkr.ecr.ap-northeast-2.amazonaws.com/frontend:b2bf490c
#         envFrom:                                                                                                    
#         - secretRef:                                                                                                
#             name: mir-secret   
#         imagePullPolicy: Always
#         name: ecommerce-spree-observability
#         ports:
#         - containerPort: 3000
#           protocol: TCP

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     tags.datadoghq.com/service: storefront
#     tags.datadoghq.com/env: development
#     app: ecommerce
#   name: frontend-rollout-bluegreen-active
#   namespace: ecommerce
# spec:
#   ports:
#     - port: 80
#       protocol: TCP
#       targetPort: 3000
#       #nodePort: 30050
#       name: http
#   selector:
#     tags.datadoghq.com/service: storefront
#     tags.datadoghq.com/env: development
#     app: ecommerce
#   # Change this value to LoadBalancer for better public ingress routing to this
#   # pod on most k8s platforms.
#   type: LoadBalancer


# ---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     tags.datadoghq.com/service: storefront
#     tags.datadoghq.com/env: development
#     app: ecommerce
#   name: frontend-rollout-bluegreen-preview
#   namespace: ecommerce
# spec:
#   ports:
#     - port: 80
#       protocol: TCP
#       targetPort: 3000
#       #nodePort: 30050
#       name: http
#   selector:
#     tags.datadoghq.com/service: storefront
#     tags.datadoghq.com/env: development
#     app: ecommerce
#   # Change this value to LoadBalancer for better public ingress routing to this
#   # pod on most k8s platforms.
#   type: LoadBalancer

